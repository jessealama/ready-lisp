* New in version 20090125

** Upgraded various components, the current versions are:

     Aquamacs    1.6
     SBCL        1.0.24
     SLIME       2009-01-25
     CL-FAD      0.6.2
     CL-PPCRE    2.0.1
     LOCAL-TIME  0.9.3
     SERIES      2.2.10

* New in version 20080426

** Upgraded various components, the current versions are:

     Aquamacs    1.3b
     SBCL        1.0.16
     SLIME       2008-04-24
     CL-FAD      0.6.2
     CL-PPCRE    1.3.2
     LOCAL-TIME  0.9.3
     SERIES      2.2.9

** The Intel side of Ready Lisp now runs 32-bit only, instead of 64-bit and
   32-bit as before.  This is because 64-bit support is not official yet, and
   often yields inferior stack traces to the 32-bit version.

** Threading support has been disabled.  This is a feature that is also not
   officially supported on OS X yet, and can cause unpredictable behavior and
   lock ups in the SBCL compiler.  My feeling is that if someone needs to do
   enough work with SBCL to use threads, they will also be able to build their
   own Ready Lisp (see the next note).  For most users this package, however,
   their interests are better served by sticking to what is fully supported.

** Ready Lisp is now built using a completely different Makefile system which
   makes it possible for anyone to easily create their own Ready Lisp
   distribution.  See the bottom of the README for details.

   If you have a PowerPC machine accessible via ssh, you can even build a
   fully universal build of Ready Lisp.  Here's how I build locally, where my
   PowerBook G4 is accessible at 192.168.2.102:

     git clone git://github.com/jwiegley/ready-lisp.git \
         && cd ready-lisp \
         && time sh build.sh 192.168.2.102

   This process takes a very long time (several hours), but in the ends yields
   a .dmg file which contains all that you need.  If you need to update the
   versions of the various sub-packages, please edit the Makefile.  Also,
   don't specify an IP address to build.sh if you don't have a PowerPC machine
   to build with.

* New in version 1.0.12-10.5.1-2

** A couple of pathname issues were discovered that led to the inability to
   load asdf-install (or use it).  These have all been corrected.

** If you now use asdf-install and choose a "system-wide" installation, the
   installed packages are dumped into your Application bundle.  However, due
   to the way that asdf-install itself works, if you move your application
   bundle to another directory there are symbolic links which will break.  So
   I recommend always installing new packages in your home directory instead,
   unless you intend never to move Ready Lisp from /Applications.

** The sources for SBCL are now included, meaning that if you use M-. (jump to
   definition) and pick a function like mapcar, it will drop you into the
   source code for SBCL's MAPCAR implementation.

* New in version 1.0.12-10.5.1

** Ready Lisp is now fully universal, and runs on the following platforms:

   - Intel 64-bit
   - Intel 32-bit
   - PowerPC 32-bit

   There is no port of SBCL to 64-bit PowerPC.  Experimental threading has
   been enabled for both Intel platforms.

** The following pieces were updated:

   - SBCL, to version 1.0.12.17
   - SLIME, to CVS version 2007-12-06

   Aquamacs remains at version 1.2a.

** Info documentation for the Common Lisp pieces is now bundled in.  Just type
   `C-h i' to read it.  Also, when editing Common Lisp files, you can type
   `C-h f' to instantly access the HyperSpec index.  In Emacs Lisp files,
   `C-h f' will get you help on Emacs Lisp functions.

   There is also HTML and PDF versions of all documentation in:

     Ready Lisp.app/Contents/Resources/html
     Ready Lisp.app/Contents/Resources/doc

** There are a few more Common Lisp libraries bundled in the core file with
   this release:

   - CL-FAD
   - LOCAL-TIME
   - SERIES
   - MEMOIZE
   - CL-PPCRE

   I find these libraries very handy, but mainly I'm including them because
   the upcoming release of my CL-Ledger accounting tool depends on them, so it
   will work for Ready Lisp users out-of-the-box.  See the "doc" subdirectory
   above for documentation on how to use these libraries (except memoize,
   which does not have separate documentation; use MEMOIZE:MEMOIZE-FUNCTION to
   mark a function as memoized).
