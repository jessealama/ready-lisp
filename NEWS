* New in version 1.0.12-10.5.1-2

** A couple of pathname issues were discovered that led to the inability to
   load asdf-install (or use it).  These have all been corrected.

** If you now use asdf-install and choose a "system-wide" installation, the
   installed packages are dumped into your Application bundle.  However, due
   to the way that asdf-install itself works, if you move your application
   bundle to another directory there are symbolic links which will break.  So
   I recommend always installing new packages in your home directory instead,
   unless you intend never to move Ready Lisp from /Applications.

** The sources for SBCL are now included, meaning that if you use M-. (jump to
   definition) and pick a function like mapcar, it will drop you into the
   source code for SBCL's MAPCAR implementation.

* New in version 1.0.12-10.5.1

** Ready Lisp is now fully universal, and runs on the following platforms:

   - Intel 64-bit
   - Intel 32-bit
   - PowerPC 32-bit

   There is no port of SBCL to 64-bit PowerPC.  Experimental threading has
   been enabled for both Intel platforms.

** The following pieces were updated:

   - SBCL, to version 1.0.12.17
   - SLIME, to CVS version 2007-12-06

   Aquamacs remains at version 1.2a.

** Info documentation for the Common Lisp pieces is now bundled in.  Just type
   `C-h i' to read it.  Also, when editing Common Lisp files, you can type
   `C-h f' to instantly access the HyperSpec index.  In Emacs Lisp files,
   `C-h f' will get you help on Emacs Lisp functions.

   There is also HTML and PDF versions of all documentation in:

     Ready Lisp.app/Contents/Resources/html
     Ready Lisp.app/Contents/Resources/doc

** There are a few more Common Lisp libraries bundled in the core file with
   this release:

   - CL-FAD
   - LOCAL-TIME
   - SERIES
   - MEMOIZE
   - CL-PPCRE

   I find these libraries very handy, but mainly I'm including them because
   the upcoming release of my CL-Ledger accounting tool depends on them, so it
   will work for Ready Lisp users out-of-the-box.  See the "doc" subdirectory
   above for documentation on how to use these libraries (except memoize,
   which does not have separate documentation; use MEMOIZE:MEMOIZE-FUNCTION to
   mark a function as memoized).
